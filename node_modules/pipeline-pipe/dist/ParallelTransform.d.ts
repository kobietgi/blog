import { Transform, TransformOptions } from 'readable-stream';
export declare type ParallelTransformOptions = TransformOptions & {
    maxParallel?: number;
    ordered?: boolean;
};
declare type Callback = (error?: Error, data?: any) => void;
export declare type OnTransformFn = (data: any, callback: Callback) => void;
export default class ParallelTransform extends Transform {
    private _destroyed;
    private readonly _maxParallel;
    private readonly _ontransform;
    private _finishing;
    private readonly _ordered;
    private readonly _buffer;
    private _top;
    private _bottom;
    private ondrain;
    constructor(ontransform: OnTransformFn, opts: ParallelTransformOptions);
    destroy(): this;
    _transform(chunk: any, encoding: string, callback: Callback): void;
    _final(callback: Callback): void;
    _drain(): void;
    _drained(): boolean;
}
export {};
